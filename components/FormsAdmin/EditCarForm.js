"use client";
import React, { useEffect, useState } from "react";
import { Button, Form, Input, message, Popconfirm, Upload, Radio, Checkbox, Select } from "antd";
import { UploadOutlined } from "@ant-design/icons";
import { DndContext, closestCenter } from "@dnd-kit/core";
import { SortableContext, useSortable, verticalListSortingStrategy, arrayMove } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import Resizer from "react-image-file-resizer";
import { DataCar } from '@/constans/CarData';
import { carOptions } from '@/constans/carOptions';
import { optionLabels } from '@/constans/optionLabels';
import { dollarExchangeRate } from '@/Api-bank/api';
import { updateOneCar } from "@/http/adminAPI";
import { transliterate } from "@/transliterate/transliterate";
import { deleteOneCar } from "@/http/adminAPI";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
const engineOptions = ['–ë–µ–Ω–∑–∏–Ω', '–î–∏–∑–µ–ª—å', '–ì–∞–∑', '–≠–ª–µ–∫—Ç—Ä–æ'];
const transmissionOptions = ['–ê–≤—Ç–æ–º–∞—Ç', '–ú–µ—Ö–∞–Ω–∏–∫–∞'];
const bodyTypeOptions = ['–°–µ–¥–∞–Ω', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª', '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫', '–ú–∏–Ω–∏–≤—ç–Ω', '–•—ç—Ç—á–±–µ–∫', '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å', '–ö—É–ø–µ', '–ö–∞–±—Ä–∏–æ–ª–µ—Ç', '–ü–∏–∫–∞–ø', '–î—Ä—É–≥–æ–µ'];
const driveOptions = ['–ü–µ—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥', '–ó–∞–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥', '–ü–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥'];
const engineCapacityOptions = Array.from({ length: 81 }, (_, i) => `${(i + 10) / 10}–ª`);

const { TextArea } = Input;
const { Option } = Select;

const resizeFile = (file, width, height, quality = 60) =>
	new Promise((resolve, reject) => {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø—É File –∏–ª–∏ Blob
		if (!(file instanceof Blob || file instanceof File)) {
			reject(new Error("Invalid file type"));
			return;
		}

		Resizer.imageFileResizer(
			file,
			width,
			height,
			"WEBP",
			quality,
			0,
			async (uri) => {
				try {
					const res = await fetch(uri);
					const blob = await res.blob();
					const resizedFile = new File([blob], file.name, { type: "image/webp" });
					resolve(resizedFile);
				} catch (error) {
					reject(error);
				}
			},
			"base64"
		);
	});

const EditCarForm = ({ carData, setProduct }) => {
	console.log("üöÄ üöÄ üöÄ  _ EditCarForm _ carData:", carData)
	const [form] = Form.useForm();
	const [imageList, setImageList] = useState([]);

	const [dollar, setDollar] = useState(null);
	const [selectedBrand, setSelectedBrand] = useState(null);
	const [selectedModel, setSelectedModel] = useState(null);
	const [selectedGeneration, setSelectedGeneration] = useState(null);

	// –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞
	useEffect(() => {
		dollarExchangeRate().then(data => {
			setDollar(data.data.Cur_OfficialRate);
		});
	}, []);

	useEffect(() => {
		if (carData) {
			const parsedImages = typeof carData.images === "string" ? JSON.parse(carData.images) : carData.images || [];
			const imagesWithUID = parsedImages.map((image, index) => ({
				...image,
				uid: image.uid || `__AUTO__${Date.now()}_${index}__`
			}));

			setImageList(imagesWithUID);

			const brandObj = DataCar.find(brand => brand.brand === carData.brand.name);
			setSelectedBrand(brandObj ? brandObj.id : null);

			const modelObj = brandObj ? brandObj.type.find(model => model.model === carData.model.name) : null;
			setSelectedModel(modelObj ? modelObj.id : null);

			const generation = modelObj && modelObj.generations.includes(carData.generation.name)
				? carData.generation.name
				: null;
			setSelectedGeneration(generation);

			form.setFieldsValue({
				...carData,
				brand: brandObj ? brandObj.id : null,
				model: modelObj ? modelObj.id : null,
				generation: generation,
				priceBYN: carData.priceUSD * dollar,
			});
		}
	}, [carData, dollar, form]);


	const handleRemoveImage = (id) => {
		setImageList((prevList) => {
			const updatedList = prevList.filter((file) => file.uid !== id);
			return updatedList;
		});
	};


	const handleDragEnd = (event) => {
		const { active, over } = event;
		if (active.id !== over.id) {
			setImageList((prevList) => {
				const oldIndex = prevList.findIndex((file) => file.uid === active.id);
				const newIndex = prevList.findIndex((file) => file.uid === over.id);
				const newList = arrayMove(prevList, oldIndex, newIndex);
				return newList;
			});
		}
	};

	const handleImageUpload = async ({ fileList }) => {
		const processedImages = await Promise.all(
			fileList.map(async (file) => {
				if (file.originFileObj || file instanceof File) {
					const original = await resizeFile(file.originFileObj || file, 1280, 720, 70);
					const thumbnail = await resizeFile(file.originFileObj || file, 300, 169, 85);
					return { original, thumbnail, uid: file.uid };
				}
				return file;
			})
		);
		setImageList(processedImages);
	};

	const SortableImage = ({ id, image, onRemove, isMain }) => {
		const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id });
		const style = {
			transform: CSS.Transform.toString(transform),
			transition,
		};

		const handleDelete = (e) => {
			e.stopPropagation();
			onRemove(id);
		};

		// –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ image ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ URL (blob), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –Ω–∞–ø—Ä—è–º—É—é, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
		const imageUrl = image instanceof File ? URL.createObjectURL(image) : image;

		return (
			<div className="sd:mr-2 xz:mr-1 relative">
				<div ref={setNodeRef} style={style} {...attributes} {...listeners} className="sortable-image-item mt-4 relative">
					{imageUrl ? (
						<img src={imageUrl} alt="upload" className="sd:w-24 xz:w-16" />
					) : (
						<span>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</span>
					)}
					{isMain && (
						<div className="absolute top-0.5 left-0.5 bg-green-600 bg-opacity-60 p-0.5 rounded flex items-center">
							<img src="/svg/scraper.svg" alt="scraper icon" className="w-3 h-3 mr-1" />
							<span className="text-[10px] text-white">–ì–ª–∞–≤–Ω–æ–µ</span>
						</div>
					)}
				</div>
				<button type="link" onClick={handleDelete} className="text-xs text-red-500">–£–¥–∞–ª–∏—Ç—å</button>
			</div>
		);
	};

	const handleBrandChange = (brandId) => {
		setSelectedBrand(brandId);
		setSelectedModel(null);
		setSelectedGeneration(null);
		form.setFieldsValue({ model: undefined, generation: undefined });
	};

	const handleModelChange = (value) => {
		setSelectedModel(value);
		form.setFieldsValue({ generation: undefined });
	};

	const handleGenerationChange = (value) => {
		setSelectedGeneration(value);
	};

	const onFinish = async (values) => {
		console.log("üöÄ üöÄ üöÄ  _ onFinish _ values:", values);
		console.log("üöÄ üöÄ üöÄ  _ EditCarForm _ imageList:", imageList);

		const formData = new FormData();
		const titleLink = transliterate(values.title).replace(/\s+/g, '-').toLowerCase();
		formData.append('titleLink', titleLink);
		formData.append('carId', carData.id);

		Object.entries(values).forEach(([key, value]) => {
			formData.append(key, Array.isArray(value) ? JSON.stringify(value) : value);
		});

		const priceBYN = parseFloat(values.priceUSD) * dollar;
		formData.append('priceBYN', priceBYN);

		// –†–∞–∑–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ
		const existingImages = imageList.filter(
			(file) => typeof file.original === 'string' && typeof file.thumbnail === 'string'
		);

		const newImages = imageList.filter(
			(file) => file.original instanceof File && file.thumbnail instanceof File
		);

		// –ü–µ—Ä–µ–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ JSON —Å—Ç—Ä–æ–∫–∏
		if (existingImages.length > 0) {
			formData.append('existingImages', JSON.stringify(existingImages));
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
		newImages.forEach((file) => {
			formData.append('originalImages', file.original);
			formData.append('thumbnailImages', file.thumbnail);
		});

		try {
			const response = await updateOneCar(formData);
			message.success("–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!");
			form.resetFields();
			setImageList([]);
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", error);
			message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è");
		}
	};


	const handleDeleteCar = async () => {
		try {
			await deleteOneCar(carData.id).then(data => {
				if (data) {
					message.success(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${carData.title} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`);
					form.resetFields();
					setImageList([]);
					setProduct({});
				}
			})
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", error);
			message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è");
		}
	};


	const cancel = (e) => {
		message.error('–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è!');
	};


	return (
		<div className="pt-3">
			<p className="text-right mb-3 text-xs">
				–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –ù–ë –†–ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {dollar}—Ä.
			</p>

			<Form
				form={form}
				name="editCar"
				onFinish={onFinish}
				labelCol={{ span: 24 }}
				wrapperCol={{ span: 24 }}
				initialValues={{
					...carData,
					brand: carData.brand.id,
					model: carData.model.id,
					generation: carData.generation.id,
					priceBYN: carData.priceUSD * dollar,
				}}
			>

				<Form.Item name="vip" label="VIP" valuePropName="checked">
					<Checkbox>VIP</Checkbox>
				</Form.Item>

				<Form.Item name="brand" label="–ú–∞—Ä–∫–∞" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É' }]}>
					<Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É" onChange={handleBrandChange} value={selectedBrand}>
						{DataCar.map((brand) => (
							<Option key={brand.id} value={brand.id}>{brand.brand}</Option>
						))}
					</Select>
				</Form.Item>

				<Form.Item name="model" label="–ú–æ–¥–µ–ª—å" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å' }]}>
					<Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å" onChange={handleModelChange} disabled={!selectedBrand}>
						{(DataCar.find((brand) => brand.id === selectedBrand)?.type || []).map((model) => (
							<Option key={model.id} value={model.id}>{model.model}</Option>
						))}
					</Select>
				</Form.Item>

				<Form.Item name="generation" label="–ü–æ–∫–æ–ª–µ–Ω–∏–µ">
					<Select
						placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ"
						disabled={!selectedModel}
						onChange={handleGenerationChange}
						value={selectedGeneration}
					>
						{(DataCar.find((brand) => brand.id === selectedBrand)?.type.find((model) => model.id === selectedModel)?.generations || []).map((generation) => (
							<Option key={generation} value={generation}>{generation}</Option>
						))}
					</Select>
				</Form.Item>


				<Form.Item name="title" label="–ù–∞–∑–≤–∞–Ω–∏–µ" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è' }]}>
					<Input placeholder="Lada (–í–ê–ó) 2121 –ù–∏–≤–∞ I" />
				</Form.Item>

				<Form.Item name="priceUSD" label="–¶–µ–Ω–∞ (USD)" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ USD' }]}>
					<Input placeholder="3000" />
				</Form.Item>

				<Form.Item name="mileage" label="–ü—Ä–æ–±–µ–≥" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥' }]}>
					<Input placeholder="75500" />
				</Form.Item>

				<Form.Item name="year" label="–ì–æ–¥" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞' }]}>
					<Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥">
						{Array.from({ length: 30 }, (_, i) => {
							const year = 2024 - i;
							return <Select.Option key={year} value={year}>{year}</Select.Option>;
						})}
					</Select>
				</Form.Item>

				<Form.Item name="engine" label="–î–≤–∏–≥–∞—Ç–µ–ª—å" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è' }]}>
					<Radio.Group optionType="button" buttonStyle="solid">
						{engineOptions.map((option) => (
							<Radio.Button key={option} value={option}>{option}</Radio.Button>
						))}
					</Radio.Group>
				</Form.Item>

				<Form.Item name="transmission" label="–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –ø–µ—Ä–µ–¥–∞—á' }]}>
					<Radio.Group optionType="button" buttonStyle="solid">
						{transmissionOptions.map((option) => (
							<Radio.Button key={option} value={option}>{option}</Radio.Button>
						))}
					</Radio.Group>
				</Form.Item>

				<Form.Item name="engineCapacity" label="–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è' }]}>
					<Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è">
						{engineCapacityOptions.map((option) => (
							<Select.Option key={option} value={option}>{option}</Select.Option>
						))}
					</Select>
				</Form.Item>

				<Form.Item name="bodyType" label="–¢–∏–ø –∫—É–∑–æ–≤–∞" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–∑–æ–≤–∞' }]}>
					<Radio.Group optionType="button" buttonStyle="solid">
						{bodyTypeOptions.map((option) => (
							<Radio.Button key={option} value={option}>{option}</Radio.Button>
						))}
					</Radio.Group>
				</Form.Item>

				<Form.Item name="drive" label="–ü—Ä–∏–≤–æ–¥" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤–æ–¥–∞' }]}>
					<Radio.Group optionType="button" buttonStyle="solid">
						{driveOptions.map((option) => (
							<Radio.Button key={option} value={option}>{option}</Radio.Button>
						))}
					</Radio.Group>
				</Form.Item>

				<Form.Item name="salon" label="–°–∞–ª–æ–Ω" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–ª–æ–Ω–∞' }]}>
					<Radio.Group optionType="button" buttonStyle="solid">
						{carOptions.salon.map((option) => (
							<Radio.Button key={option} value={option}>{option}</Radio.Button>
						))}
					</Radio.Group>
				</Form.Item>

				<Form.Item name="material" label="–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–∞–ª–æ–Ω–∞" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Å–∞–ª–æ–Ω–∞' }]}>
					<Radio.Group optionType="button" buttonStyle="solid">
						{carOptions.material.map((option) => (
							<Radio.Button key={option} value={option}>{option}</Radio.Button>
						))}
					</Radio.Group>
				</Form.Item>

				<Form.Item name="description" label="–û–ø–∏—Å–∞–Ω–∏–µ">
					<TextArea rows={4} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" />
				</Form.Item>

				{/* Checkbox */}
				{Object.keys(carOptions).filter(key => !['salon', 'material'].includes(key)).map((optionKey) => (
					<Form.Item key={optionKey} name={optionKey} label={optionLabels[optionKey]}>
						<Checkbox.Group
							options={carOptions[optionKey].map((option) => ({ label: option, value: option }))}
							style={{ display: 'flex', flexDirection: 'column' }}
						/>
					</Form.Item>
				))}

				<Form.Item label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" name="images">
					<Upload
						accept="image/*"
						multiple
						beforeUpload={() => false}
						onChange={handleImageUpload}
						fileList={imageList}
						showUploadList={false}
					>
						<Button icon={<UploadOutlined />}>–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Button>
					</Upload>
					<DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
						<SortableContext items={imageList.map((file) => file.uid)} strategy={verticalListSortingStrategy}>
							<div className="sortable-images flex flex-wrap">
								{imageList.map((file, index) => (
									<SortableImage
										key={file.uid}
										id={file.uid}
										image={
											file.original instanceof File
												? URL.createObjectURL(file.original)
												: `${process.env.NEXT_PUBLIC_BASE_URL}/uploads/${file.original}`
										}
										onRemove={handleRemoveImage}
										isMain={index === 0}
									/>
								))}
							</div>
						</SortableContext>
					</DndContext>
				</Form.Item>


				<Form.Item>
					<Button type="primary" htmlType="submit">
						–°–æ—Ö—Ä–∞–Ω–∏—Ç—å
					</Button>
				</Form.Item>
			</Form>

			<div className='flex justify-end'>
				<Popconfirm
					title={`–£–¥–∞–ª–µ–Ω–∏–µ ${carData.title}`}
					description="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?"
					onConfirm={handleDeleteCar}
					onCancel={cancel}
					okText="–î–∞"
					cancelText="–ù–µ—Ç"
				>
					<Button type="link" danger>
						–£–¥–∞–ª–∏—Ç—å {carData.title}
					</Button>
				</Popconfirm>
			</div>
		</div>
	);
};

export default EditCarForm;
