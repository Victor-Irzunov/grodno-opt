"use client";

import { Button, message } from "antd";
import { useRef } from "react";
import { useReactToPrint } from "react-to-print";
import { sendOrderTelegram } from "@/http/telegramAPI";

const OrderPrint = ({ order, user }) => {
  const printRef = useRef(null);

  const handlePrint = useReactToPrint({
    contentRef: printRef, // üëà –≤–º–µ—Å—Ç–æ content
    documentTitle: `–ó–∞–∫–∞–∑ ‚Ññ${order.id}`,
    removeAfterPrint: true,
  });

  const totalSum = order.orderItems.reduce((sum, item) => sum + item.quantity * parseFloat(item.price), 0);
  const deliveryCost = parseFloat(order.deliveryCost || 0);
  const fullTotal = (totalSum + deliveryCost).toFixed(2);

  const handleSendToTelegram = async () => {
    const productList = order.orderItems.map((item) =>
      `‚Ä¢ ${item.product?.title} ‚Äî ${item.price} $ x ${item.quantity} —à—Ç. (–ê—Ä—Ç–∏–∫—É–ª: ${item.product?.article})`
    ).join('\n');

    const messageText = `
<b>üì¶ –ù–∞–∫–ª–∞–¥–Ω–∞—è (–ó–∞–∫–∞–∑ ‚Ññ${order.id})</b>\n
<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> ${user?.userData?.fullName || "‚Äî"}\n
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user?.userData?.phone || "‚Äî"}\n
<b>üìç –ê–¥—Ä–µ—Å:</b> ${order.shippingInfo?.address || user?.userData?.address || "‚Äî"}\n
<b>üöö –î–æ—Å—Ç–∞–≤–∫–∞:</b> ${order.shippingInfo?.courier || "–°–∞–º–æ–≤—ã–≤–æ–∑"}\n
<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${order.message || "‚Äî"}\n\n
<b>üõí –¢–æ–≤–∞—Ä—ã:</b>\n${productList}\n
${deliveryCost > 0 ? `<b>üöö –î–æ—Å—Ç–∞–≤–∫–∞:</b> ${deliveryCost.toFixed(2)} $` : ''}
<b>üí∞ –û–±—â–∞—è —Å—É–º–º–∞:</b> ${fullTotal} $
`;

    try {
      await sendOrderTelegram(messageText);
      message.success("–ù–∞–∫–ª–∞–¥–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", err);
      message.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram");
    }
  };

  return (
    <div className="mb-8 mt-9">
      <div ref={printRef} className="p-8 bg-white text-black text-sm w-[210mm] h-auto shadow mx-auto print:w-full">
        <h1 className="text-xl font-bold mb-2">–ù–∞–∫–ª–∞–¥–Ω–∞—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}</h1>
        <p className="mb-1">–ö–ª–∏–µ–Ω—Ç: {user?.userData?.fullName}</p>
        <p className="mb-1">–¢–µ–ª–µ—Ñ–æ–Ω: {user?.userData?.phone}</p>
        <p className="mb-1">–ê–¥—Ä–µ—Å: {order.shippingInfo?.address || user?.userData?.address}</p>
        <p className="mb-4">–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.shippingInfo?.courier || "–°–∞–º–æ–≤—ã–≤–æ–∑"}</p>

        <table className="w-full border-collapse border border-black mb-4 text-xs">
          <thead>
            <tr className="bg-gray-200">
              <th className="border border-black px-2 py-1 text-left">–¢–æ–≤–∞—Ä</th>
              <th className="border border-black px-2 py-1 text-left">–ê—Ä—Ç–∏–∫—É–ª</th>
              <th className="border border-black px-2 py-1 text-left">–ö–æ–ª-–≤–æ</th>
              <th className="border border-black px-2 py-1 text-left">–¶–µ–Ω–∞</th>
              <th className="border border-black px-2 py-1 text-left">–ò—Ç–æ–≥–æ</th>
            </tr>
          </thead>
          <tbody>
            {order.orderItems.map((item) => (
              <tr key={item.id}>
                <td className="border border-black px-2 py-1">{item.product?.title}</td>
                <td className="border border-black px-2 py-1">{item.product?.article}</td>
                <td className="border border-black px-2 py-1">{item.quantity}</td>
                <td className="border border-black px-2 py-1">{parseFloat(item.price).toFixed(2)} $</td>
                <td className="border border-black px-2 py-1">
                  {(item.quantity * parseFloat(item.price)).toFixed(2)} $
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {order.shippingInfo?.courier !== "–°–∞–º–æ–≤—ã–≤–æ–∑" && (
          <p className="mb-2">
            –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: <strong>{deliveryCost.toFixed(2)} $</strong>
          </p>
        )}

        <p className="text-right font-semibold text-base mt-4">
          –û–±—â–∞—è —Å—É–º–º–∞: {fullTotal} $
        </p>
      </div>

      <div className="mt-7 flex gap-4 justify-end pr-11">
        <Button onClick={handlePrint} className="mb-4">
          üñ®Ô∏è –ü–µ—á–∞—Ç—å –∑–∞–∫–∞–∑–∞
        </Button>
        <Button onClick={handleSendToTelegram} className="mb-4" type="primary">
          üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
        </Button>
      </div>
    </div>
  );
};

export default OrderPrint;
