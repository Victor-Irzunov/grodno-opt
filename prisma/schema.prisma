// /prisma/schema.prisma — ФАЙЛ ПОЛНОСТЬЮ
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  isAdmin        Boolean
  createdAt      DateTime        @default(now())
  userData       UserData?
  wholesaleBuyer WholesaleBuyer?
}

model UserData {
  id        Int      @id @default(autoincrement())
  fullName  String
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  groups    Group[]
  products  Product[]        // ← обратное поле к Product.category
}

model Group {
  id         Int       @id @default(autoincrement())
  title      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId Int
  discount   Decimal?  @db.Decimal(5, 2)

  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]        // ← обратное поле к Product.group

  @@index([title], name: "idx_group_title")
}

model Product {
  id          Int          @id @default(autoincrement())
  title       String
  status      String
  count       Int
  price       Decimal      @db.Decimal(12, 3)
  article     String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  groupId     Int
  categoryId  Int
  isDeleted   Boolean      @default(false)
  images      Json?
  description String?      @db.Text          // ← ОПИСАНИЕ ТОВАРА

  group       Group        @relation(fields: [groupId], references: [id])
  category    Category     @relation(fields: [categoryId], references: [id])

  orderItems  OrderItem[]
  returnItems ReturnItem[]

  @@index([title], name: "idx_product_title")
  @@index([categoryId], name: "idx_product_categoryId")
  @@index([groupId], name: "idx_product_groupId")
}

model PriceHash {
  id        Int      @id @default(autoincrement())
  hash      String   @unique
  createdAt DateTime @default(now())
}

model WholesaleBuyer {
  id           Int                  @id @default(autoincrement())
  userId       Int                  @unique
  balance      Decimal              @db.Decimal(12, 2)
  debt         Decimal              @default(0.00) @db.Decimal(12, 2)
  discount     Decimal              @default(0.00) @db.Decimal(5, 2)
  limit        Decimal              @default(0.00) @db.Decimal(12, 2)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  user         User                 @relation(fields: [userId], references: [id])
  orders       Order[]
  returns      Return[]
  transactions BalanceTransaction[]
}

model BalanceTransaction {
  id        Int            @id @default(autoincrement())
  buyerId   Int
  amount    Decimal        @db.Decimal(12, 2)
  type      String
  createdAt DateTime       @default(now())

  buyer     WholesaleBuyer @relation(fields: [buyerId], references: [id])
}

model Order {
  id             Int            @id @default(autoincrement())
  buyerId        Int
  status         String         @default("pending")
  deliveryStatus String         @default("processing")
  totalAmount    Decimal        @db.Decimal(12, 2)
  deliveryCost   Decimal?       @db.Decimal(12, 2)
  message        String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  buyer          WholesaleBuyer @relation(fields: [buyerId], references: [id])
  shippingInfo   ShippingInfo?
  orderItems     OrderItem[]
  returns        Return[]
}

model ShippingInfo {
  id             Int      @id @default(autoincrement())
  orderId        Int      @unique
  courier        String
  trackingNumber String?
  address        String
  createdAt      DateTime @default(now())

  order          Order    @relation(fields: [orderId], references: [id])
}

model OrderItem {
  id         Int          @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Decimal      @db.Decimal(12, 2)

  order      Order        @relation(fields: [orderId], references: [id])
  product    Product      @relation(fields: [productId], references: [id])

  ReturnItem ReturnItem[]   // обратная связь
}

model Return {
  id          Int            @id @default(autoincrement())
  buyerId     Int
  orderId     Int
  totalRefund Decimal        @db.Decimal(12, 2)
  reason      String
  comment     String?
  status      String         @default("pending")
  createdAt   DateTime       @default(now())

  buyer       WholesaleBuyer @relation(fields: [buyerId], references: [id])
  order       Order          @relation(fields: [orderId], references: [id])

  returnItems ReturnItem[]
}

model ReturnItem {
  id           Int        @id @default(autoincrement())
  returnId     Int
  productId    Int
  orderItemId  Int?                      // ← делаем опциональным
  quantity     Int
  refundAmount Decimal    @db.Decimal(12, 2)

  return       Return     @relation(fields: [returnId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])
  orderItem    OrderItem? @relation(fields: [orderItemId], references: [id]) // ← связь опц.
}

model ContactRequest {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  company   String?
  message   String?
  createdAt DateTime @default(now())
  isViewed  Boolean  @default(false)
  status    String   @default("Заявка")
}
